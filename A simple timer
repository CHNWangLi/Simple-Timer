import time as t

class MyTimer():
    def __init__(self):
        self.unit = ['year', 'month', 'day', 'hour', 'minute', 'second']
        self.prompt = 'Timing not started'
        # 类的方法名和属性名一样，属性会覆盖方法
        self.lasted = []
        self.begin = 0
        self.end = 0
    
    def __repr__(self):
        return self.prompt

    def __add__(self, other):
        prompt = 'Total run '
        result = []
        for index in range(6):
            result.append(self.lasted[index] + other.lasted[index])
            if result[index]:
                prompt += (repr(result[index]) + self.unit[index])
        return prompt
    
    # Begin the timer
    def start(self):
        self.begin = t.localtime()   #不要用self.start做属性名
        self.prompt = 'Prompt: please call stop() first to stop the timer'
        print('Begin the timer')

    # Stop the timer
    def stop(self):
        if not self.begin:
            print('Please call start() first to begin the timer')
        else:
            self.end = t.localtime()   # 不要用self.stop做属性名
            self._calc()
            print('Stop the timer')

    # Internal method, to calculate the time
    def _calc(self):
        self.lasted = []
        self.prompt = 'Run in total '
        for index in range(6):
            self.lasted.append(self.end[index] - self.begin[index])
            if self.lasted[index]:
                self.prompt += (repr(self.lasted[index]) + self.unit[index])
        # Initialize variables for next round of timing
        self.begin = 0
        self.end = 0
